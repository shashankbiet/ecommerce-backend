version: "3.9"
services:
    api-gateway:
        build: ./api-gateway
        container_name: api-gateway
        environment:
            - APP_NAME=api-gateway
            - PORT=3001
            - ACCESS_TOKEN_SECRET=9876543210
            - USER_SERVICE_TARGET=http://user-service:3002
        ports:
            - 3001:3001
        depends_on:
            - user-service
    user-service:
        build: ./user-service
        container_name: user-service
        environment:
            - APP_NAME=user-service
            - PORT=3002
            - MONGODB_URL=mongodb://mongodb/userService
            - ADMIN_VERIFICATION_TOKEN=1234567890
        depends_on:
            - mongodb
    inventory-service:
        build: ./inventory-service
        container_name: inventory-service
        environment:
            - APP_NAME=inventory-service
            - ENVIRONMENT=dev
            - HTTP_SERVER_PORT=3003
        ports:
            - 3003:3003
        depends_on:
            mysql:
                condition: service_healthy
    mongodb:
        image: mongo:4.0.28
        container_name: mongodb
        restart: always
        volumes:
            - ./bind-mount/db/mongodb:/data/db
        ports:
            - 27017:27017
    mysql:
        image: mysql:8.0
        container_name: mysql
        restart: unless-stopped
        environment:
            MYSQL_USER: testuser
            MYSQL_PASSWORD: testpassword
            MYSQL_ROOT_PASSWORD: testrootpassword
            MYSQL_DATABASE: testdb
        healthcheck:
            test:
                [
                    "CMD",
                    "mysqladmin",
                    "ping",
                    "-h",
                    "docker.for.mac.localhost"
                ]
            start_period: 0s
            timeout: 10s
            interval: 1s
            retries: 10
        volumes:
            - ./bind-mount/db/mysql:/var/lib/mysql
        ports:
            - "3306:3306"
    zookeper:
        image: confluentinc/cp-zookeeper:7.3.0
        hostname: zookeeper
        container_name: zookeper
        restart: always
        environment:
            - ZOOKEEPER_CLIENT_PORT=2181
            - ZOO_TICK_TIME=2000
    kafka:
        image: confluentinc/cp-kafka:7.3.0
        container_name: kafka
        restart: always
        ports:
            - 9092:9092
        environment:
            - KAFKA_BROKER_ID=1
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
            - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
            - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
            - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
            - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
        healthcheck:
            test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
        depends_on:
            - zookeper
    prometheus:
        image: prom/prometheus
        container_name: prometheus
        restart: always
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
            - ./bind-mount/prometheus:/prometheus
        command:
            - --config.file=/etc/prometheus/prometheus.yml
        ports:
            - 9090:9090
    grafana:
        image: grafana/grafana-oss
        container_name: grafana
        restart: unless-stopped
        volumes:
            - ./bind-mount/grafana:/var/lib/grafana
        environment:
            - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
        entrypoint:
            - sh
            - -euc
            - |
              mkdir -p /etc/grafana/provisioning/datasources
              cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
              apiVersion: 1
              datasources:
              - name: Loki
              type: loki
              access: proxy
              orgId: 1
              url: http://loki:3100
              basicAuth: false
              isDefault: true
              version: 1
              editable: false
              EOF
              /run.sh
        ports:
            - 3000:3000
        depends_on:
            - prometheus
    loki:
        image: grafana/loki:2.9.0
        container_name: loki
        restart: unless-stopped
        volumes:
            - ./loki-config.yaml:/mnt/config/loki-config.yaml:ro
            - ./bind-mount/loki:/tmp/loki
        command:
            - --config.file=/mnt/config/loki-config.yaml
        ports:
            - 3100:3100
    promtail:
        image: grafana/promtail:2.9.0
        container_name: promtail
        restart: unless-stopped
        volumes:
            - ./promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
            - /var/log:/var/log
        command:
            - --config.file=/etc/promtail/promtail-config.yaml
        depends_on:
            - loki
    cadvisor:
        image: gcr.io/cadvisor/cadvisor:v0.46.0
        container_name: cadvisor
        volumes:
            - /:/rootfs:ro
            - /var/run/docker.sock:/var/run/docker.sock:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
        ports:
            - 8080:8080
